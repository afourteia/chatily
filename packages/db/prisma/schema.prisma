//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("MAIN_DATABASE_URL")
  directUrl = env("MAIN_DATABASE_DIRECT_URL")
}

generator client {
  provider     = "prisma-client"
  output       = "./../generated/prisma"
  moduleFormat = "esm"
}

model User {
  id                      String               @id()
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt()
  projectedAt             DateTime             @default(now())
  name                    String
  username                String?              @unique()
  email                   String?              @unique()
  phone                   String?              @unique()
  isActive                Boolean              @default(true)
  lastActiveAt            DateTime?
  userSecret              UserSecret?
  otp                     OneTimePassword?
  deviceTokens            DeviceToken[]
  refreshTokens           RefreshToken[]
  notifications           Notification[]
  memberOfTenants         TenantMember[]
  viewLogCreations        ViewLog[]            @relation("creator")
  eventStoreCreations     EventStore[]         @relation("creator")
  commandCreations        EventCommand[]       @relation("creator")
  invoiceInquiryCreations InvoiceInquiry[]     @relation("creator")
  invoiceInquiryUpdates   InvoiceInquiry[]     @relation("updater")
  tenantCreations         Tenant[]             @relation("creator")
  tenantUpdates           Tenant[]             @relation("updater")
  tenantMemberCreations   TenantMember[]       @relation("creator")
  tenantMemberUpdates     TenantMember[]       @relation("updater")
  tenantPolicyCreations   TenantAccessPolicy[] @relation("creator")
  tenantPolicyUpdates     TenantAccessPolicy[] @relation("updater")
  resourceCreations       Resource[]           @relation("creator")
  resourceUpdates         Resource[]           @relation("updater")

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model UserSecret {
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @id() @unique()
  passwordHash String?
  otpSecret    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model DeviceToken {
  id         String   @id()
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  token      String
  deviceType String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([token, userId])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model RefreshToken {
  id        String    @id()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model OneTimePassword {
  id        String   @id()
  createdAt DateTime @default(now())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique()

  @@index([createdAt(sort: Desc)])
}

model BeneficiaryEntity {
  id            String        @id()
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  projectedAt   DateTime      @default(now())
  workId        String
  institution   String
  beneficiaries Beneficiary[]

  @@unique([institution, workId])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model Beneficiary {
  id               String                       @id()
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt()
  name             String
  dalilId          String                       @unique()
  workId           String
  relationship     String
  dateOfBirth      DateTime?
  isActive         Boolean                      @default(true)
  isHidden         Boolean                      @default(false)
  entity           BeneficiaryEntity            @relation(fields: [entityId], references: [id])
  entityId         String
  dalilDbId        BigInt                       @unique()
  viewLogs         ViewLog[]
  statusChangeLogs BeneficiaryStatusChangeLog[]
  inquiries        InvoiceInquiry[]

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model BeneficiaryStatusChangeLog {
  id            String      @id()
  createdAt     DateTime    @default(now())
  projectedAt   DateTime    @default(now())
  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String
  status        String

  @@index([createdAt(sort: Desc)])
  @@index([beneficiaryId, createdAt(sort: Desc)])
}

model ViewLog {
  id            String      @id()
  createdAt     DateTime    @default(now())
  creator       User        @relation("creator", fields: [creatorId], references: [id])
  creatorId     String
  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String
  ipAddress     String
  userAgent     String

  @@index([createdAt(sort: Desc)])
  @@index([creatorId, createdAt(sort: Desc)])
  @@index([beneficiaryId, createdAt(sort: Desc)])
}

model InvoiceInquiry {
  id                  String      @id()
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt()
  creator             User        @relation("creator", fields: [creatorId], references: [id])
  creatorId           String
  updater             User        @relation("updater", fields: [updaterId], references: [id])
  updaterId           String
  projectedAt         DateTime    @default(now())
  beneficiary         Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId       String
  requestedAmount     Decimal
  requestDescription  String
  coveredAmount       Decimal
  approvalStatus      String      @default("pending")
  decisionDescription String?
  utilizationStatus   String      @default("pending")
  healthCenterId      String?
  expiryDate          DateTime

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([updaterId(sort: Desc)])
}

model EventLog {
  id          String   @id()
  createdAt   DateTime @default(now())
  message     String
  source      String
  levelTypeId String
  meta        Json?

  @@index([createdAt(sort: Desc)])
}

model Notification {
  id        String    @id()
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  payload   Json?
  readAt    DateTime?

  @@index([createdAt(sort: Desc)])
}

model AggregateSnapshot {
  id               String      @id() @default(cuid(2))
  aggregateType    String
  aggregateId      String
  snapshotData     Json
  version          BigInt
  createdAt        DateTime    @default(now())
  eventStoreCommit EventStore? @relation(fields: [eventStoreId], references: [id])
  eventStoreId     String?     @unique()

  @@unique([aggregateType, aggregateId, version])
  @@index([createdAt(sort: Desc)])
}

model EventStore {
  id            String             @id()
  createdAt     DateTime           @default(now())
  creator       User               @relation("creator", fields: [creatorId], references: [id])
  creatorId     String
  aggregateType String
  aggregateId   String
  eventType     String
  data          Json
  version       BigInt
  correlationId String?
  commandId     String?
  snapshot      AggregateSnapshot?

  @@unique([aggregateType, aggregateId, version])
  @@index([createdAt(sort: Desc)])
  @@index([creatorId, createdAt(sort: Desc)])
}

model EventCommand {
  id            String   @id()
  createdAt     DateTime @default(now())
  creator       User     @relation("creator", fields: [creatorId], references: [id])
  creatorId     String
  aggregateType String
  commandType   String
  data          Json

  @@index([createdAt(sort: Desc)])
  @@index([creatorId, createdAt(sort: Desc)])
  @@index([aggregateType, createdAt(sort: Desc)])
}

model Tenant {
  id                   String               @id()
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt()
  creator              User                 @relation("creator", fields: [creatorId], references: [id])
  creatorId            String
  updater              User                 @relation("updater", fields: [updaterId], references: [id])
  updaterId            String
  projectedAt          DateTime             @default(now())
  name                 String
  members              TenantMember[]
  tenantType           Enumeration          @relation("TenantType", fields: [tenantTypeId], references: [id])
  tenantTypeId         String
  isActive             Boolean              @default(true)
  tenantAccessPolicies TenantAccessPolicy[]

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([updaterId(sort: Desc)])
}

model TenantMember {
  id           String      @id()
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt()
  creator      User        @relation("creator", fields: [creatorId], references: [id])
  creatorId    String
  updater      User        @relation("updater", fields: [updaterId], references: [id])
  updaterId    String
  projectedAt  DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  tenant       Tenant      @relation(fields: [tenantId], references: [id])
  tenantId     String
  memberRole   Enumeration @relation("MemberRole", fields: [memberRoleId], references: [id])
  memberRoleId String

  @@unique([userId, tenantId])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([updaterId(sort: Desc)])
  @@index([tenantId, userId])
}

model TenantAccessPolicy {
  id          String   @id()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  creator     User     @relation("creator", fields: [creatorId], references: [id])
  creatorId   String
  updater     User     @relation("updater", fields: [updaterId], references: [id])
  updaterId   String
  projectedAt DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  resource    Resource @relation(fields: [resourceId], references: [id])
  resourceId  String

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([updaterId(sort: Desc)])
}

model Resource {
  id                   String               @id()
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt()
  creator              User                 @relation("creator", fields: [creatorId], references: [id])
  creatorId            String
  updater              User                 @relation("updater", fields: [updaterId], references: [id])
  updaterId            String
  projectedAt          DateTime             @default(now())
  resourceType         Enumeration          @relation("ResourceType", fields: [resourceTypeId], references: [id])
  resourceTypeId       String
  foreignKey           String
  tenantAccessPolicies TenantAccessPolicy[]

  @@unique([resourceTypeId, foreignKey])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([updaterId(sort: Desc)])
}

model Country {
  id        String   @id()
  createdAt DateTime @default(now())
  nameAr    String
  nameEn    String?
  phoneCode String?  @unique()
  currency  String?
  cities    City[]

  @@index([createdAt(sort: Desc)])
}

model City {
  id        String   @id()
  createdAt DateTime @default(now())
  nameAr    String
  nameEn    String?
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String

  @@index([createdAt(sort: Desc)])
}

model Enumeration {
  id            String         @id()
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  nameAr        String
  nameEn        String?
  enumCategory  String
  meta          Json?
  tenantTypes   Tenant[]       @relation("TenantType")
  resourceTypes Resource[]     @relation("ResourceType")
  memberRoles   TenantMember[] @relation("MemberRole")

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([enumCategory, id])
}

model Tag {
  id          String   @id()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  name        String
  description String?

  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
}

model SchemaTables {
  name String @id()
}
