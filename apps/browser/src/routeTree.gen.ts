/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardProcessBalanceInquiryRouteImport } from './routes/_dashboard/process-balance-inquiry'
import { Route as DashboardBeneficiaryStatusRouteImport } from './routes/_dashboard/beneficiary-status'
import { Route as DashboardBeneficiaryBalanceInquiryRouteImport } from './routes/_dashboard/beneficiary-balance-inquiry'
import { Route as DashboardBalanceReservationLogRouteImport } from './routes/_dashboard/balance-reservation-log'
import { Route as DashboardAccountInfoRouteImport } from './routes/_dashboard/account-info'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'

const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardProcessBalanceInquiryRoute =
  DashboardProcessBalanceInquiryRouteImport.update({
    id: '/process-balance-inquiry',
    path: '/process-balance-inquiry',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardBeneficiaryStatusRoute =
  DashboardBeneficiaryStatusRouteImport.update({
    id: '/beneficiary-status',
    path: '/beneficiary-status',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardBeneficiaryBalanceInquiryRoute =
  DashboardBeneficiaryBalanceInquiryRouteImport.update({
    id: '/beneficiary-balance-inquiry',
    path: '/beneficiary-balance-inquiry',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardBalanceReservationLogRoute =
  DashboardBalanceReservationLogRouteImport.update({
    id: '/balance-reservation-log',
    path: '/balance-reservation-log',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardAccountInfoRoute = DashboardAccountInfoRouteImport.update({
  id: '/account-info',
  path: '/account-info',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/account-info': typeof DashboardAccountInfoRoute
  '/balance-reservation-log': typeof DashboardBalanceReservationLogRoute
  '/beneficiary-balance-inquiry': typeof DashboardBeneficiaryBalanceInquiryRoute
  '/beneficiary-status': typeof DashboardBeneficiaryStatusRoute
  '/process-balance-inquiry': typeof DashboardProcessBalanceInquiryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/account-info': typeof DashboardAccountInfoRoute
  '/balance-reservation-log': typeof DashboardBalanceReservationLogRoute
  '/beneficiary-balance-inquiry': typeof DashboardBeneficiaryBalanceInquiryRoute
  '/beneficiary-status': typeof DashboardBeneficiaryStatusRoute
  '/process-balance-inquiry': typeof DashboardProcessBalanceInquiryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_dashboard/account-info': typeof DashboardAccountInfoRoute
  '/_dashboard/balance-reservation-log': typeof DashboardBalanceReservationLogRoute
  '/_dashboard/beneficiary-balance-inquiry': typeof DashboardBeneficiaryBalanceInquiryRoute
  '/_dashboard/beneficiary-status': typeof DashboardBeneficiaryStatusRoute
  '/_dashboard/process-balance-inquiry': typeof DashboardProcessBalanceInquiryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/account-info'
    | '/balance-reservation-log'
    | '/beneficiary-balance-inquiry'
    | '/beneficiary-status'
    | '/process-balance-inquiry'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/account-info'
    | '/balance-reservation-log'
    | '/beneficiary-balance-inquiry'
    | '/beneficiary-status'
    | '/process-balance-inquiry'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/_auth/login'
    | '/_dashboard/account-info'
    | '/_dashboard/balance-reservation-log'
    | '/_dashboard/beneficiary-balance-inquiry'
    | '/_dashboard/beneficiary-status'
    | '/_dashboard/process-balance-inquiry'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/process-balance-inquiry': {
      id: '/_dashboard/process-balance-inquiry'
      path: '/process-balance-inquiry'
      fullPath: '/process-balance-inquiry'
      preLoaderRoute: typeof DashboardProcessBalanceInquiryRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/beneficiary-status': {
      id: '/_dashboard/beneficiary-status'
      path: '/beneficiary-status'
      fullPath: '/beneficiary-status'
      preLoaderRoute: typeof DashboardBeneficiaryStatusRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/beneficiary-balance-inquiry': {
      id: '/_dashboard/beneficiary-balance-inquiry'
      path: '/beneficiary-balance-inquiry'
      fullPath: '/beneficiary-balance-inquiry'
      preLoaderRoute: typeof DashboardBeneficiaryBalanceInquiryRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/balance-reservation-log': {
      id: '/_dashboard/balance-reservation-log'
      path: '/balance-reservation-log'
      fullPath: '/balance-reservation-log'
      preLoaderRoute: typeof DashboardBalanceReservationLogRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/account-info': {
      id: '/_dashboard/account-info'
      path: '/account-info'
      fullPath: '/account-info'
      preLoaderRoute: typeof DashboardAccountInfoRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardAccountInfoRoute: typeof DashboardAccountInfoRoute
  DashboardBalanceReservationLogRoute: typeof DashboardBalanceReservationLogRoute
  DashboardBeneficiaryBalanceInquiryRoute: typeof DashboardBeneficiaryBalanceInquiryRoute
  DashboardBeneficiaryStatusRoute: typeof DashboardBeneficiaryStatusRoute
  DashboardProcessBalanceInquiryRoute: typeof DashboardProcessBalanceInquiryRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAccountInfoRoute: DashboardAccountInfoRoute,
  DashboardBalanceReservationLogRoute: DashboardBalanceReservationLogRoute,
  DashboardBeneficiaryBalanceInquiryRoute:
    DashboardBeneficiaryBalanceInquiryRoute,
  DashboardBeneficiaryStatusRoute: DashboardBeneficiaryStatusRoute,
  DashboardProcessBalanceInquiryRoute: DashboardProcessBalanceInquiryRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
